package com.example.telegrambot.component;

import com.example.telegrambot.interfaces.PhotoInputHandler;
import com.example.telegrambot.interfaces.UserStateHandler;
import com.example.telegrambot.keyboard.KeyboardFactory;
import com.example.telegrambot.service.UserStateService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;

import java.util.List;

@Component
public class MessageHandler {

    private static final Logger logger = LoggerFactory.getLogger(MessageHandler.class);

    private final List<UserStateHandler> stateHandlers;
    private final UserStateService userStateService;
    private final GearChatMemoryService gearChatMemoryService;

    public MessageHandler(
            List<UserStateHandler> stateHandlers,
            UserStateService userStateService,
            GearChatMemoryService gearChatMemoryService
    ) {
        this.stateHandlers = stateHandlers;
        this.userStateService = userStateService;
        this.gearChatMemoryService = gearChatMemoryService;
    }

    public SendMessage handleTextMessage(String chatId, String messageText) {
        logger.info("Received message from [{}]: {}", chatId, messageText);

        return switch (messageText) {

            case "üì∏ –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –§–æ—Ç–æ" -> {
                logger.debug("User [{}] selected: –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –§–æ—Ç–æ", chatId);

                yield new SendMessage(chatId,
                        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ, —è–∫–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ üì∑");
            }

            case "üéØ –Ü–¥–µ—ó –¥–ª—è —Ñ–æ—Ç–æ—Å–µ—Å—ñ—ó" -> {
                logger.debug("User [{}] selected: –Ü–¥–µ—ó –¥–ª—è —Ñ–æ—Ç–æ—Å–µ—Å—ñ—ó", chatId);

                yield new SendMessage(chatId,
                        "–ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ–º—É –∞–±–æ –ø–æ–±–∞–∂–∞–Ω–Ω—è –¥–ª—è —Ñ–æ—Ç–æ—Å–µ—Å—ñ—ó üìù");
            }

            case "üß† AI-–∞–Ω–∞–ª—ñ–∑ –§–æ—Ç–æ" -> {
                logger.debug("User [{}] selected: AI-–∞–Ω–∞–ª—ñ–∑ –§–æ—Ç–æ", chatId);

                yield new SendMessage(chatId,
                        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —è–∫–æ—Å—Ç—ñ ü§î");
            }

            case "üè∑Ô∏è –•–µ—à—Ç–µ–≥–∏ —Ç–∞ –û–ø–∏—Å" -> {
                userStateService.setUserState(chatId, "CAPTION_MODE");
                SendMessage msg = new SendMessage(chatId, """
            ‚úçÔ∏è –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –∞–±–æ —Ñ–æ—Ç–æ (–∞–±–æ —ñ —Ç–µ, —ñ —Ç–µ), —ñ —è –∑–≥–µ–Ω–µ—Ä—É—é –æ–ø–∏—Å + —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ —Ö–µ—à—Ç–µ–≥–∏.
            """);
                msg.setReplyMarkup(KeyboardFactory.exitKeyboard());
                yield msg;
            }

            case "üí∞ –ü—Ä–∞–π—Å-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" -> {
                logger.debug("User [{}] selected: –ü—Ä–∞–π—Å-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", chatId);

                yield new SendMessage(chatId,
                        "–í–≤–µ–¥—ñ—Ç—å —Ç–∏–ø –∑–π–æ–º–∫–∏ —Ç–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: '–≤–µ—Å—ñ–ª–ª—è 3 –≥–æ–¥–∏–Ω–∏') üíµ");
            }

            case "üì∑ –ü—ñ–¥–∫–∞–∑–∫–∏ –ø–æ –û–±–ª–∞–¥–Ω–∞–Ω–Ω—é" -> {
                logger.debug("User [{}] entered GEAR_CHAT_MODE", chatId);

                userStateService.setUserState(chatId, "GEAR_CHAT_MODE");
                SendMessage msg = new SendMessage(chatId,
                        "üí¨ –í–∏ —É–≤—ñ–π—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –ø–æ —Ç–µ—Ö–Ω—ñ—Ü—ñ. " +
                                "–ù–∞–ø–∏—à—ñ—Ç—å —Ç–∏–ø –∑–π–æ–º–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –≤–µ—Å—ñ–ª–ª—è, –ø–æ—Ä—Ç—Ä–µ—Ç, –∑–π–æ–º–∫–∞ –≤ —Å—Ç—É–¥—ñ—ó —ñ —Ç.–¥.).\n" +
                                "–ê —è –ø—ñ–¥–∫–∞–∂—É, —è–∫–µ —Ñ–æ—Ç–æ–æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –≤–∞–º –Ω–∞–π–∫—Ä–∞—â–µ –ø—ñ–¥—ñ–π–¥–µ (–∫–∞–º–µ—Ä–∞, –æ–±‚Äô—î–∫—Ç–∏–≤, –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è, —Ñ–æ–Ω).");
                msg.setReplyMarkup(KeyboardFactory.exitKeyboard());
                yield msg;
            }

            case "‚Ü© –í–∏–π—Ç–∏ –∑ —Ä–µ–∂–∏–º—É" -> {
                logger.debug("User [{}] exited GEAR_CHAT_MODE", chatId);

                userStateService.clearUserState(chatId);
                gearChatMemoryService.clearMemory(chatId);

                SendMessage msg = new SendMessage(chatId, "‚úÖ –í–∏ –≤–∏–π—à–ª–∏ –∑ —Ä–µ–∂–∏–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó.");
                msg.setReplyMarkup(KeyboardFactory.mainKeyboard());
                yield msg;
            }

            default -> {
                String state = userStateService.getUserState(chatId);
                logger.debug("User [{}] in state: {}", chatId, state);

                for (UserStateHandler handler : stateHandlers) {
                    if (handler.supports(state)) {
                        logger.debug("Delegating to handler: {}", handler.getClass().getSimpleName());
                        yield handler.handle(chatId, messageText);
                    }
                }

                logger.warn("User [{}] sent unrecognized message outside any handler: {}", chatId, messageText);

                SendMessage msg = new SendMessage(chatId,
                        "ü§ñ –Ø –ø–æ–∫–∏ —â–æ —Ä–æ–∑—É–º—ñ—é —Ç—ñ–ª—å–∫–∏ –∫–æ–º–∞–Ω–¥–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫.");
                msg.setReplyMarkup(KeyboardFactory.mainKeyboard());
                yield msg;
            }
        };
    }

    public SendMessage handlePhotoMessage(String chatId, Message message) {
        logger.info("Received photo from [{}]", chatId);

        String state = userStateService.getUserState(chatId);
        logger.debug("Current user state for [{}]: {}", chatId, state);

        for (UserStateHandler handler : stateHandlers) {
            if (handler.supports(state) && handler instanceof PhotoInputHandler photoHandler) {
                logger.debug("Delegating photo to handler: {}", handler.getClass().getSimpleName());
                return photoHandler.handlePhoto(chatId, message);
            }
        }

        logger.warn("Received photo from [{}] but no handler matched.", chatId);
        SendMessage msg = new SendMessage(chatId,
                "üì∑ –ù–∞–¥—ñ—Å–ª–∞–Ω–µ —Ñ–æ—Ç–æ –Ω–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º —É –º–µ–Ω—é.");
        msg.setReplyMarkup(KeyboardFactory.mainKeyboard());
        return msg;
    }
}
